<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新年第一篇</title>
      <link href="/2019/02/04/%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
      <url>/2019/02/04/%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>一年伊始还是憋出来一篇文章比较合适，祝我的笔记本能在新的一年里有长足的进步。如果该有关注和同伙加入自然是更好的啦。</p><p>这算是 Julia 专题的第一篇文章，思路其实完全没有，就像当作是 Python 说吧，在计划里还会说很大一部分的 Python 部分要是有需求也可以关注更新，谢谢。</p><h2 id="全局变量使用"><a href="#全局变量使用" class="headerlink" title="全局变量使用"></a>全局变量使用</h2><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><p>假设听者有编程基础的前提，在此之上对变量名有所扩充, Julia 之前一篇已经说明过了，大致的说就是变量名没有太多的限制，那就通提限制的部分来体现不限制的部分。<code>\</code>这个转移字符在Julia里是非法的，<code>!</code>不能作为变量名首字符，具体要求请参考资料<a href="https://docs.juliacn.com/latest/manual/variables/#%E5%90%88%E6%B3%95%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D-1" target="_blank" rel="noopener">中文文档</a>、<a href="https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names-1" target="_blank" rel="noopener">英文文档</a> 。</p><figure class="highlight plain"><figcaption><span>Note</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参考 Python，Python2 默认的编码是Ascii，然鹅Python3的默认编码是UTF-8,所以非全英文环境乱码少了一大堆，PS.在此不讨论用Ascii和UTF-8的优缺点。</span><br></pre></td></tr></table></figure><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>在 Julia 中有抽象类型和具体类型</p><p>在没有深入了解之前把它理解为父类和子类是没有任何问题的</p><h4 id="抽象类型"><a href="#抽象类型" class="headerlink" title="抽象类型"></a>抽象类型</h4><h5 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h5><p>抽象类型关键词<code>Integer</code>有如下具体类型</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Int</span> <span class="comment"># PS.在不同的Julia位数中Int的默认类型是不一样的，32位默认Int32，64位默认Int64</span></span><br><span class="line">  <span class="built_in">Int8</span></span><br><span class="line">  <span class="built_in">Int16</span></span><br><span class="line">  <span class="built_in">Int32</span></span><br><span class="line">  <span class="built_in">Int64</span></span><br><span class="line">  <span class="built_in">Int128</span></span><br><span class="line"><span class="built_in">BigInt</span></span><br></pre></td></tr></table></figure><h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><p>抽象类型关键词<code>AbstractFloat</code>有如下具体类型</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Float16</span></span><br><span class="line"><span class="built_in">Float32</span></span><br><span class="line"><span class="built_in">Float64</span></span><br><span class="line"><span class="built_in">BigFloat</span></span><br></pre></td></tr></table></figure><h5 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h5><p>抽象关键词<code>Complex</code>复数生产函数也可以用该关键词<code>Complex(real,imag)</code>可以通过整数类型和浮点类型推导得复数应该有得具体类型</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Complex</span>&#123;<span class="built_in">Int</span>&#125;</span><br><span class="line"><span class="built_in">Complex</span>&#123;AbstraFloat&#125;</span><br><span class="line"><span class="comment"># 常用关键词</span></span><br><span class="line">ComplexF16 == <span class="built_in">Complex</span>&#123;<span class="built_in">Float16</span>&#125;</span><br><span class="line">ComplexF32 == <span class="built_in">Complex</span>&#123;<span class="built_in">Float32</span>&#125;</span><br><span class="line">ComplexF64 == <span class="built_in">Complex</span>&#123;<span class="built_in">Float64</span>&#125;</span><br><span class="line"><span class="comment"># 可用构建方式</span></span><br><span class="line">real + imag * <span class="literal">im</span></span><br></pre></td></tr></table></figure><h5 id="分数类型"><a href="#分数类型" class="headerlink" title="分数类型"></a>分数类型</h5><p>一个我没用过得数据类型….</p><p>抽象关键词<code>Rational</code>然后这玩意没倒腾过有兴趣嘚请自己查柒。</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>这个我连脚都不想往里踏，只说一点，<strong>分字符串和字符</strong>。</p><h3 id="主函数中的变量"><a href="#主函数中的变量" class="headerlink" title="主函数中的变量"></a>主函数中的变量</h3><p>在主函数中的变量是全局作用域的，但是非显示得传入函数的变量，在函数中修改是非法的，修改的作用域在函数内。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; a=<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">julia&gt; <span class="keyword">function</span> change()</span><br><span class="line">         a+=<span class="number">1</span></span><br><span class="line">         print(a)</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">change (generic <span class="keyword">function</span> with <span class="number">1</span> method)</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="keyword">function</span> change(a)</span><br><span class="line">         a+=<span class="number">1</span></span><br><span class="line">         print(a)</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">change (generic <span class="keyword">function</span> with <span class="number">2</span> methods)</span><br><span class="line"></span><br><span class="line">julia&gt; change()</span><br><span class="line">ERROR: <span class="built_in">UndefVarError</span>: a not defined</span><br><span class="line">Stacktrace:</span><br><span class="line"> [<span class="number">1</span>] change() at .\REPL[<span class="number">86</span>]:<span class="number">2</span></span><br><span class="line"> [<span class="number">2</span>] top-level scope at none:<span class="number">0</span></span><br><span class="line"></span><br><span class="line">julia&gt; change(a)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">julia&gt; a</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>到此结束今天得休息了，日后再战。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Julia Julia入门 Julia、Python对比 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begin Julialang</title>
      <link href="/2019/01/31/Begin-Julialang/"/>
      <url>/2019/01/31/Begin-Julialang/</url>
      
        <content type="html"><![CDATA[<p>Julia 一种新型通用动态编程语言，有很神奇的特性。也有一群有着独特需求的发起人，Julia发起于2009年、2012年定名为Julia、2013年有了第一版、0.7版大改一次，2018-08-08有了第一个稳定版，目前最新稳定版为<code>1.1.0</code>（2019/2/1）。</p><h3 id="引用一下这群人奇葩的想法"><a href="#引用一下这群人奇葩的想法" class="headerlink" title="引用一下这群人奇葩的想法"></a>引用一下这群人奇葩的想法</h3><blockquote><p>我们想要一种拥有自由许可的开源语言，同时拥有 C 的速度和 Ruby 的灵活。我们想要一种同像性语言，有像 Lisp 这样真正的宏，也有像 Matlab 这样的浅显熟悉的数学符号。我们想要一门像 Python 一样可用于通用编程，像 R 一样易于统计，像 Perl 一样自然地用于字符串处理，像 Matlab 一样强大的线性代数，像 shell 一样擅长将程序粘合在一起的语言。它简单易学，却能让严苛的黑客为之倾心。我们希望它是交互式的，具备可编译性。</p></blockquote><p>这基本上满足了我们所有的贪念，一种语言能让我们感受到多少东西和取舍呢，很期待!</p><h2 id="下面说一下语言的特性"><a href="#下面说一下语言的特性" class="headerlink" title="下面说一下语言的特性"></a>下面说一下语言的特性</h2><p>有Python一样的灵活，动态调式的方便；有Matlab类似的逻辑；接近C等静态语言的计算速度；原生的图形化包；可过程可函数也可以有个对象；简洁的继承关系、扩展语法。</p><p>和 R 语言一样原生支持Unicode字符，意味着可以写出类似于<code>速度=something</code> <code>δ=x₁-x₂</code> <code>∑=sum(list)</code>这样的类似于原生语义的奇葩代码。</p><p>她的扩展性不局限在语言设计的本身，设计之初就兼顾了调用其他语言的扩展功能，在开发者被采访的过程中自己也说了，没有取代任何其他语言的想法，包括<code>Python</code>在内，实际上每一门语言都有被设计的领域、原因，修改、妥协的理由。每一门语言都有自己的哲学，就像每个人都有自己的个性，为了她的优点就得接受她的缺点，若不能忍耐要么改她要么换一个语言。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>暂且就不说了，没有大量使用前的总结都是空谈。来跟着我一起学习Julia吧。</p><h2 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h2><p>老习惯 <code>Hello Word</code>，为了体现原生编码优势改为 <code>Hello，中国！</code></p><figure class="highlight julia"><figcaption><span>hello Word</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env julia</span></span><br><span class="line">println(<span class="string">"Hello，中国！"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 入坑 Julia入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
